#pragma once
#include<iostream>

/*
* @brief 
*/
class IntNode
{
public:
	int x;//поле данных
	IntNode* next;// указатель на следующий элемент;
	IntNode();
	IntNode(int data);
};
/*
		 \brief Kласс Cвязный список

		 \details Класс,состоящий из указателя на первый узел(начало списка)
				  Узел - вспомогательный публичный класс, состоящая из данного типа
				  int и указателя на следующий элемент
	*/
class Linked_list
{
public:
	
	

	IntNode* m_head;// указатель на первый узел - голову списка
	
	Linked_list();// конструктор,создает голову списка
	~Linked_list();// деструктор 

	
	//\brief функция,печатающая список
    void Print();
	/*
		 
		 \details Функция берёт односвязный список и циклом
				  проходит по нему,печатая его.Явных аргументов нет,
				  поскольку мы  находимся в классе.
	*/
	
	//\brief функция, принимающая число и вставляющая в конец списка
	void push_back(int x);
	/*    
	     @params x - значение,которое пойдет в конец списка; получаем на выходе
		             список с новым элементом
	     
	
         \details функция создает новый узел по передаваемому значению
		          переменной х и добавляет в конец списка этот  узел
	
	
	
	*/
	//\brief функция, удаляющая элемент по номеру в списке
	void delete_el(int x);
	/*
	     @params x - номер элемента(начиная с 0) в списке,который будет удален
		 возвращает список без элемента с номером x,либо выводит сообщение о том,что
		 либо такого элемента не было,либо что список был пуст

		 \details функция, проверяет позицию удаляемого элемента:
		 eсли элемент с краю - просто удаляем,если есть связи с другими узлами,
		 которые существуют - перекидываем на вновь созданный узел
	
	
	*/
	//\brief функция ищет элемент  
	IntNode* find_el(int x);
	/*
	      @params x -значение элемента,который будет искаться
		  возвращает указатель на элемент,если он существует и сообщение о том,что данный
		  элемент существует, либо возвращает нулевой указатель и сообщение о том, что
		  элемент не существует
		  
		  \details функция ищет циклом элемент и возвращает указатель на первый элемент,
		  имеющий такое же значение,что и передаваемый парааметр
	
	
	*/

	/*
	* @brief Функция
	* @param x: Входной параметр
	* @return Выхдной параметр
	*/
	int f(int x);
};

